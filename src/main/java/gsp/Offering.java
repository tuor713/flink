/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gsp;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Offering extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3473877391267495198L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Offering\",\"namespace\":\"gsp\",\"fields\":[{\"name\":\"CUSIP\",\"type\":\"string\"},{\"name\":\"Venue\",\"type\":\"string\"},{\"name\":\"Price\",\"type\":\"double\"},{\"name\":\"Size\",\"type\":\"double\"},{\"name\":\"Side\",\"type\":{\"type\":\"enum\",\"name\":\"BuySell\",\"symbols\":[\"BUY\",\"SELL\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Offering> ENCODER =
      new BinaryMessageEncoder<Offering>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Offering> DECODER =
      new BinaryMessageDecoder<Offering>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Offering> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Offering> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Offering>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Offering to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Offering from a ByteBuffer. */
  public static Offering fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence CUSIP;
  @Deprecated public java.lang.CharSequence Venue;
  @Deprecated public double Price;
  @Deprecated public double Size;
  @Deprecated public gsp.BuySell Side;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Offering() {}

  /**
   * All-args constructor.
   * @param CUSIP The new value for CUSIP
   * @param Venue The new value for Venue
   * @param Price The new value for Price
   * @param Size The new value for Size
   * @param Side The new value for Side
   */
  public Offering(java.lang.CharSequence CUSIP, java.lang.CharSequence Venue, java.lang.Double Price, java.lang.Double Size, gsp.BuySell Side) {
    this.CUSIP = CUSIP;
    this.Venue = Venue;
    this.Price = Price;
    this.Size = Size;
    this.Side = Side;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return CUSIP;
    case 1: return Venue;
    case 2: return Price;
    case 3: return Size;
    case 4: return Side;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: CUSIP = (java.lang.CharSequence)value$; break;
    case 1: Venue = (java.lang.CharSequence)value$; break;
    case 2: Price = (java.lang.Double)value$; break;
    case 3: Size = (java.lang.Double)value$; break;
    case 4: Side = (gsp.BuySell)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'CUSIP' field.
   * @return The value of the 'CUSIP' field.
   */
  public java.lang.CharSequence getCUSIP() {
    return CUSIP;
  }

  /**
   * Sets the value of the 'CUSIP' field.
   * @param value the value to set.
   */
  public void setCUSIP(java.lang.CharSequence value) {
    this.CUSIP = value;
  }

  /**
   * Gets the value of the 'Venue' field.
   * @return The value of the 'Venue' field.
   */
  public java.lang.CharSequence getVenue() {
    return Venue;
  }

  /**
   * Sets the value of the 'Venue' field.
   * @param value the value to set.
   */
  public void setVenue(java.lang.CharSequence value) {
    this.Venue = value;
  }

  /**
   * Gets the value of the 'Price' field.
   * @return The value of the 'Price' field.
   */
  public java.lang.Double getPrice() {
    return Price;
  }

  /**
   * Sets the value of the 'Price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Double value) {
    this.Price = value;
  }

  /**
   * Gets the value of the 'Size' field.
   * @return The value of the 'Size' field.
   */
  public java.lang.Double getSize() {
    return Size;
  }

  /**
   * Sets the value of the 'Size' field.
   * @param value the value to set.
   */
  public void setSize(java.lang.Double value) {
    this.Size = value;
  }

  /**
   * Gets the value of the 'Side' field.
   * @return The value of the 'Side' field.
   */
  public gsp.BuySell getSide() {
    return Side;
  }

  /**
   * Sets the value of the 'Side' field.
   * @param value the value to set.
   */
  public void setSide(gsp.BuySell value) {
    this.Side = value;
  }

  /**
   * Creates a new Offering RecordBuilder.
   * @return A new Offering RecordBuilder
   */
  public static gsp.Offering.Builder newBuilder() {
    return new gsp.Offering.Builder();
  }

  /**
   * Creates a new Offering RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Offering RecordBuilder
   */
  public static gsp.Offering.Builder newBuilder(gsp.Offering.Builder other) {
    return new gsp.Offering.Builder(other);
  }

  /**
   * Creates a new Offering RecordBuilder by copying an existing Offering instance.
   * @param other The existing instance to copy.
   * @return A new Offering RecordBuilder
   */
  public static gsp.Offering.Builder newBuilder(gsp.Offering other) {
    return new gsp.Offering.Builder(other);
  }

  /**
   * RecordBuilder for Offering instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Offering>
    implements org.apache.avro.data.RecordBuilder<Offering> {

    private java.lang.CharSequence CUSIP;
    private java.lang.CharSequence Venue;
    private double Price;
    private double Size;
    private gsp.BuySell Side;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gsp.Offering.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.CUSIP)) {
        this.CUSIP = data().deepCopy(fields()[0].schema(), other.CUSIP);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Venue)) {
        this.Venue = data().deepCopy(fields()[1].schema(), other.Venue);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Price)) {
        this.Price = data().deepCopy(fields()[2].schema(), other.Price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Size)) {
        this.Size = data().deepCopy(fields()[3].schema(), other.Size);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Side)) {
        this.Side = data().deepCopy(fields()[4].schema(), other.Side);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Offering instance
     * @param other The existing instance to copy.
     */
    private Builder(gsp.Offering other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.CUSIP)) {
        this.CUSIP = data().deepCopy(fields()[0].schema(), other.CUSIP);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Venue)) {
        this.Venue = data().deepCopy(fields()[1].schema(), other.Venue);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Price)) {
        this.Price = data().deepCopy(fields()[2].schema(), other.Price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Size)) {
        this.Size = data().deepCopy(fields()[3].schema(), other.Size);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Side)) {
        this.Side = data().deepCopy(fields()[4].schema(), other.Side);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'CUSIP' field.
      * @return The value.
      */
    public java.lang.CharSequence getCUSIP() {
      return CUSIP;
    }

    /**
      * Sets the value of the 'CUSIP' field.
      * @param value The value of 'CUSIP'.
      * @return This builder.
      */
    public gsp.Offering.Builder setCUSIP(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.CUSIP = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'CUSIP' field has been set.
      * @return True if the 'CUSIP' field has been set, false otherwise.
      */
    public boolean hasCUSIP() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'CUSIP' field.
      * @return This builder.
      */
    public gsp.Offering.Builder clearCUSIP() {
      CUSIP = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Venue' field.
      * @return The value.
      */
    public java.lang.CharSequence getVenue() {
      return Venue;
    }

    /**
      * Sets the value of the 'Venue' field.
      * @param value The value of 'Venue'.
      * @return This builder.
      */
    public gsp.Offering.Builder setVenue(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Venue = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Venue' field has been set.
      * @return True if the 'Venue' field has been set, false otherwise.
      */
    public boolean hasVenue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Venue' field.
      * @return This builder.
      */
    public gsp.Offering.Builder clearVenue() {
      Venue = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Price' field.
      * @return The value.
      */
    public java.lang.Double getPrice() {
      return Price;
    }

    /**
      * Sets the value of the 'Price' field.
      * @param value The value of 'Price'.
      * @return This builder.
      */
    public gsp.Offering.Builder setPrice(double value) {
      validate(fields()[2], value);
      this.Price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Price' field has been set.
      * @return True if the 'Price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Price' field.
      * @return This builder.
      */
    public gsp.Offering.Builder clearPrice() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Size' field.
      * @return The value.
      */
    public java.lang.Double getSize() {
      return Size;
    }

    /**
      * Sets the value of the 'Size' field.
      * @param value The value of 'Size'.
      * @return This builder.
      */
    public gsp.Offering.Builder setSize(double value) {
      validate(fields()[3], value);
      this.Size = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Size' field has been set.
      * @return True if the 'Size' field has been set, false otherwise.
      */
    public boolean hasSize() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Size' field.
      * @return This builder.
      */
    public gsp.Offering.Builder clearSize() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'Side' field.
      * @return The value.
      */
    public gsp.BuySell getSide() {
      return Side;
    }

    /**
      * Sets the value of the 'Side' field.
      * @param value The value of 'Side'.
      * @return This builder.
      */
    public gsp.Offering.Builder setSide(gsp.BuySell value) {
      validate(fields()[4], value);
      this.Side = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'Side' field has been set.
      * @return True if the 'Side' field has been set, false otherwise.
      */
    public boolean hasSide() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'Side' field.
      * @return This builder.
      */
    public gsp.Offering.Builder clearSide() {
      Side = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Offering build() {
      try {
        Offering record = new Offering();
        record.CUSIP = fieldSetFlags()[0] ? this.CUSIP : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Venue = fieldSetFlags()[1] ? this.Venue : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.Price = fieldSetFlags()[2] ? this.Price : (java.lang.Double) defaultValue(fields()[2]);
        record.Size = fieldSetFlags()[3] ? this.Size : (java.lang.Double) defaultValue(fields()[3]);
        record.Side = fieldSetFlags()[4] ? this.Side : (gsp.BuySell) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Offering>
    WRITER$ = (org.apache.avro.io.DatumWriter<Offering>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Offering>
    READER$ = (org.apache.avro.io.DatumReader<Offering>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
