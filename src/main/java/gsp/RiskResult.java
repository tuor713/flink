/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gsp;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RiskResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1187570982063798513L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RiskResult\",\"namespace\":\"gsp\",\"fields\":[{\"name\":\"TradeRisk\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"TradeRiskValue\",\"fields\":[{\"name\":\"RiskMeasure\",\"type\":\"string\"},{\"name\":\"Parameter\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"RiskValue\",\"type\":{\"type\":\"record\",\"name\":\"RiskAmount\",\"fields\":[{\"name\":\"Currency\",\"type\":{\"type\":\"enum\",\"name\":\"Currency\",\"symbols\":[\"USD\",\"EUR\",\"GBP\",\"JPY\"]}},{\"name\":\"Amount\",\"type\":\"double\"}]}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RiskResult> ENCODER =
      new BinaryMessageEncoder<RiskResult>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RiskResult> DECODER =
      new BinaryMessageDecoder<RiskResult>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RiskResult> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RiskResult> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RiskResult>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RiskResult to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RiskResult from a ByteBuffer. */
  public static RiskResult fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.Map<java.lang.CharSequence,gsp.TradeRiskValue> TradeRisk;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RiskResult() {}

  /**
   * All-args constructor.
   * @param TradeRisk The new value for TradeRisk
   */
  public RiskResult(java.util.Map<java.lang.CharSequence,gsp.TradeRiskValue> TradeRisk) {
    this.TradeRisk = TradeRisk;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return TradeRisk;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: TradeRisk = (java.util.Map<java.lang.CharSequence,gsp.TradeRiskValue>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'TradeRisk' field.
   * @return The value of the 'TradeRisk' field.
   */
  public java.util.Map<java.lang.CharSequence,gsp.TradeRiskValue> getTradeRisk() {
    return TradeRisk;
  }

  /**
   * Sets the value of the 'TradeRisk' field.
   * @param value the value to set.
   */
  public void setTradeRisk(java.util.Map<java.lang.CharSequence,gsp.TradeRiskValue> value) {
    this.TradeRisk = value;
  }

  /**
   * Creates a new RiskResult RecordBuilder.
   * @return A new RiskResult RecordBuilder
   */
  public static gsp.RiskResult.Builder newBuilder() {
    return new gsp.RiskResult.Builder();
  }

  /**
   * Creates a new RiskResult RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RiskResult RecordBuilder
   */
  public static gsp.RiskResult.Builder newBuilder(gsp.RiskResult.Builder other) {
    return new gsp.RiskResult.Builder(other);
  }

  /**
   * Creates a new RiskResult RecordBuilder by copying an existing RiskResult instance.
   * @param other The existing instance to copy.
   * @return A new RiskResult RecordBuilder
   */
  public static gsp.RiskResult.Builder newBuilder(gsp.RiskResult other) {
    return new gsp.RiskResult.Builder(other);
  }

  /**
   * RecordBuilder for RiskResult instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RiskResult>
    implements org.apache.avro.data.RecordBuilder<RiskResult> {

    private java.util.Map<java.lang.CharSequence,gsp.TradeRiskValue> TradeRisk;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gsp.RiskResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.TradeRisk)) {
        this.TradeRisk = data().deepCopy(fields()[0].schema(), other.TradeRisk);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RiskResult instance
     * @param other The existing instance to copy.
     */
    private Builder(gsp.RiskResult other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.TradeRisk)) {
        this.TradeRisk = data().deepCopy(fields()[0].schema(), other.TradeRisk);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'TradeRisk' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,gsp.TradeRiskValue> getTradeRisk() {
      return TradeRisk;
    }

    /**
      * Sets the value of the 'TradeRisk' field.
      * @param value The value of 'TradeRisk'.
      * @return This builder.
      */
    public gsp.RiskResult.Builder setTradeRisk(java.util.Map<java.lang.CharSequence,gsp.TradeRiskValue> value) {
      validate(fields()[0], value);
      this.TradeRisk = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'TradeRisk' field has been set.
      * @return True if the 'TradeRisk' field has been set, false otherwise.
      */
    public boolean hasTradeRisk() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'TradeRisk' field.
      * @return This builder.
      */
    public gsp.RiskResult.Builder clearTradeRisk() {
      TradeRisk = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RiskResult build() {
      try {
        RiskResult record = new RiskResult();
        record.TradeRisk = fieldSetFlags()[0] ? this.TradeRisk : (java.util.Map<java.lang.CharSequence,gsp.TradeRiskValue>) defaultValue(fields()[0]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RiskResult>
    WRITER$ = (org.apache.avro.io.DatumWriter<RiskResult>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RiskResult>
    READER$ = (org.apache.avro.io.DatumReader<RiskResult>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
